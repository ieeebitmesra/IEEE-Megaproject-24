import {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } from "@google/generative-ai";
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
  
   export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const GenerateAiCode = model.startChat({
      generationConfig:CodeGenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Create todo app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   "},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"React Todo App\",\n  \"explanation\": \"This project implements a feature-rich todo application using React with Tailwind CSS for styling. It features components for managing todo lists, adding new tasks, marking tasks as complete, deleting tasks, and filtering the tasks. The application also utilizes date-fns for formatting task due dates. It focuses on providing a clean and intuitive user experience with responsive design, using only tailwind classes for styling and lucide icons for iconography.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TodoList from './components/TodoList';\\nimport AddTodo from './components/AddTodo';\\nimport Filter from './components/Filter';\\nimport { Calendar } from 'lucide-react';\\n\\nfunction App() {\\n  const [todos, setTodos] = useState(() => {\\n    const storedTodos = localStorage.getItem('todos');\\n    return storedTodos ? JSON.parse(storedTodos) : [];\\n  });\\n  const [filter, setFilter] = useState('all');\\n  const [showAddTodo, setShowAddTodo] = useState(false);\\n\\n  useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const addTodo = (newTodo) => {\\n    setTodos([...todos, newTodo]);\\n    setShowAddTodo(false);\\n  };\\n\\n  const toggleTodo = (id) => {\\n    setTodos(todos.map(todo =>\\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n    ));\\n  };\\n\\n    const deleteTodo = (id) => {\\n        setTodos(todos.filter(todo => todo.id !== id));\\n    };\\n\\n  const filteredTodos = todos.filter(todo => {\\n    if (filter === 'completed') return todo.completed;\\n    if (filter === 'incomplete') return !todo.completed;\\n    return true;\\n  });\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 flex items-center justify-center py-10\\\">\\n      <div className=\\\"bg-white shadow-2xl rounded-lg p-8 w-full max-w-3xl\\\">\\n        <div className='flex justify-between items-center mb-6'>\\n           <h1 className=\\\"text-3xl font-bold text-gray-800 mb-4 \\\">My Todos üóìÔ∏è</h1>\\n          <button onClick={() => setShowAddTodo(!showAddTodo)} className=\\\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n            {showAddTodo ? 'Cancel' : 'Add Todo'}\\n          </button>\\n        </div>\\n          \\n        {showAddTodo && <AddTodo addTodo={addTodo} setShowAddTodo={setShowAddTodo}/>}\\n        <Filter filter={filter} setFilter={setFilter} />\\n        <TodoList todos={filteredTodos} toggleTodo={toggleTodo} deleteTodo={deleteTodo} />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React from 'react';\\nimport { format } from 'date-fns';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\n\\nfunction TodoList({ todos, toggleTodo, deleteTodo }) {\\n  return (\\n      <div>\\n      {todos.length === 0 ? (<p className='text-gray-600 text-center'>No Todos Found! Add Some.</p>) : (\\n        <ul className=\\\"space-y-4\\\">\\n          {todos.map(todo => (\\n            <li key={todo.id} className=\\\"bg-gray-50 p-4 rounded-md shadow flex items-center justify-between\\\">\\n              <div className='flex items-center'>\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  checked={todo.completed}\\n                  onChange={() => toggleTodo(todo.id)}\\n                  className=\\\"mr-4 h-5 w-5 text-green-500 focus:ring-green-500 border-gray-300 rounded\\\"\\n                />\\n              <div className={`${todo.completed ? 'line-through text-gray-500' : ''}`}>\\n                <p className=\\\"font-medium text-gray-800\\\">{todo.text}</p>\\n                {todo.dueDate && <p className='text-gray-500 text-sm'>Due: {format(new Date(todo.dueDate), 'MMM dd, yyyy')}</p>}\\n              </div>\\n              </div>\\n              <div className='flex items-center space-x-2'>\\n                    <button onClick={() => deleteTodo(todo.id)} className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\">\\n                        <Trash className='h-5 w-5'/>\\n                    </button>\\n                </div>\\n            </li>\\n          ))}\\n        </ul>\\n        )}\\n    </div>\\n  );\\n}\\n\\nexport default TodoList;\\n\"\n    },\n    \"/components/AddTodo.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus, Calendar, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction AddTodo({ addTodo, setShowAddTodo }) {\\n    const [text, setText] = useState('');\\n    const [dueDate, setDueDate] = useState('');\\n\\n    const handleSubmit = (e) => {\\n        e.preventDefault();\\n        if (text.trim()) {\\n            const newTodo = {\\n              id: Date.now(),\\n              text: text.trim(),\\n              completed: false,\\n              dueDate: dueDate ? new Date(dueDate).toISOString() : null\\n            };\\n            addTodo(newTodo);\\n            setText('');\\n            setDueDate('');\\n        }\\n    };\\n  \\n  return (\\n      <div className='mt-4 mb-4'>\\n        <form onSubmit={handleSubmit} className=\\\"flex flex-col space-y-4\\\">\\n            <input\\n              type=\\\"text\\\"\\n              placeholder=\\\"Add a todo...\\\" \\n                value={text}\\n              onChange={(e) => setText(e.target.value)}\\n              className=\\\"border border-gray-300 rounded-md p-2 focus:outline-none focus:border-blue-500\\\"\\n             required/>\\n             <div className='flex items-center space-x-2'>\\n                 <Calendar className=\\\"h-5 w-5 text-gray-500\\\" />\\n             <input\\n                    type='date'\\n                    value={dueDate}\\n                    onChange={(e)=> setDueDate(e.target.value)}\\n                    className='border border-gray-300 rounded-md p-2 focus:outline-none focus:border-blue-500 text-gray-600'\\n                />\\n             </div>\\n            \\n            <div className='flex justify-between'>\\n               <button type=\\\"submit\\\" className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n                   Add\\n               </button>\\n              <button onClick={()=>setShowAddTodo(false)} className=\\\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n                 Cancel\\n               </button>\\n           </div>\\n            \\n        </form>\\n    </div>\\n  );\\n}\\n\\nexport default AddTodo;\\n\"\n    },\n    \"/components/Filter.js\": {\n      \"code\": \"import React from 'react';\\n\\nfunction Filter({ filter, setFilter }) {\\n  return (\\n    <div className=\\\"mb-4 flex space-x-2 justify-end\\\">\\n      <button\\n        onClick={() => setFilter('all')}\\n        className={`px-3 py-2 rounded  focus:outline-none ${filter === 'all' ? 'bg-blue-500 text-white' : 'border border-gray-300 hover:bg-gray-100'}\\n          `}\\n        >\\n        All\\n      </button>\\n      <button\\n        onClick={() => setFilter('completed')}\\n        className={`px-3 py-2 rounded  focus:outline-none ${filter === 'completed' ? 'bg-blue-500 text-white' : 'border border-gray-300 hover:bg-gray-100'}\\n          `}\\n        >\\n        Completed\\n      </button>\\n      <button\\n        onClick={() => setFilter('incomplete')}\\n       className={`px-3 py-2 rounded  focus:outline-none ${filter === 'incomplete' ? 'bg-blue-500 text-white' : 'border border-gray-300 hover:bg-gray-100'}\\n          `}\\n        >\\n        Incomplete\\n      </button>\\n    </div>\\n  );\\n}\\n\\nexport default Filter;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoList.js\",\n    \"/components/AddTodo.js\",\n        \"/components/Filter.js\"\n  ]\n}\n```\n"},
          ],
        },
      ],
    })
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
 